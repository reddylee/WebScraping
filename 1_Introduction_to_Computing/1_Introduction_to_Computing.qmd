---
title: "Introduction to Web Scraping and Data Management for Social Scientists"
subtitle: "Day 1: Introduction"
author: "Johannes B. Gruber"
date: 2023-07-24
format:
  revealjs:
    smaller: true
    scrollable: true
    code-line-numbers: true
    slide-number: c/t
    logo: https://essexsummerschool.com/wp-content/uploads/2016/03/essex_logo-mobile.svg
    self-contained: true
execute:
  cache: true
  echo: true
highlight-style: pygments
---

# Introduction
## The General Plan for This Course

::: {.r-fit-text}
- We want to teach you web scraping and data management
- We also want to give you the tools for *reproducible* and *transparent* open science research
:::

## The Plan for Today

:::: {.columns}

::: {.column width="60%"}
In this session, you learn how to use the **tools** of the hunt.
We will:

- discuss some useful tools and learn:
  - how to use the **terminal** (and why you should).
  - how to use `git` version control with GitHub (you will get the material for the course in this step).
  - how to use R and Python together 
- go over some principles of using the programming language `R`:
  - `R` Refresher
  - literate programming
:::

::: {.column width="30%" }
![](https://images.unsplash.com/photo-1590585382453-8b749e9d5224?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80)
[Woody Kelly](https://unsplash.com/@woodkell) via unsplash.com
:::

::::


## Who am I?

:::: {.columns}

::: {.column width="60%"}
- PostDoc at Department of Communication Science at Vrije Universiteit Amsterdam and University of Amsterdam
- Interested in:
  - Computational Social Science
  - Automated Text Analysis
  - Hybrid Media Systems and Information Flows
  - Protest and Democracy
- Experience:
  - R user for 8 years
  - R package developer for 6 years
  - Worked on several packages for text analysis, API access and web scraping (quanteda.textmodels, LexisNexisTools, paperboy, traktok, amcat4-r, and more)
:::

::: {.column width="40%"}
![](https://johannesbgruber.eu/img/JBGruber.jpg)

Contact: 

- [{{< fa envelope >}}]{style="color:#2A76DD"} [j.b.gruber@uva.nl](mailto:j.b.gruber@uva.nl) 
- [{{< fa brands mastodon >}}]{style="color:#2A76DD"} [@JBGruber@fosstodon.org](https://fosstodon.org/@JBGruber)
- [{{< fa brands twitter >}}]{style="color:#2A76DD"} [@JohannesBGruber](https://twitter.com/JohannesBGruber)
:::

::::

## Who are you?
:::: {.columns}

::: {.column width="60%"}
- What is your name?
- What are your research interests?
- What is your experience with:
  - R
  - HTML
  - webscraping
- Why are you taking this course?
- Do you have specific plans that include webscraping?
- What operating system are you using?
:::

::: {.column width="40%"}
![](https://images.unsplash.com/photo-1554497342-902a4f8da8ed?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1740&q=80)
:::

::::

# How to use the terminal (and why you should)
## Why use the terminal?

While graphical user interfaces (GUIs) can be more visually intuitive and user-friendly, the command-line interface (terminal):

1. **Reproducibility**: You use `R` because you don't want to memorise the same 15 clicks in Excel and repeat them again and again. Likewise, you can save some terminal commands with things you do regularly
2. **Scripting and Automation**: The next step can be to write entire scripts or functions to automate some tasks (like shell scripts in Unix/Linux or batch files in Windows).
3. **Remote Access and Administration**: Many remote servers do not come with a GUI as mirroring a desktop interface would be bandwidth-hungry. Tools like SSH (Secure Shell) can provide secure command-line access to remote systems.
4. **Extensive Tooling**: Many powerful tools and utilities are command-line based, especially in fields like data science and system administration.
5. **Efficiency and Speed**: Command-line interfaces can be faster to work with once you know the commands. This is particularly useful for repetitive tasks, which can be executed with simple commands.

## Some use cases
### Package manager

- Similar to the Play or App Store
- Make it easy to install apps (without accidentally signing up for some service)
- Much easier to update multiple packages at once
- Availabe for different operating systems:
  - macOS: [`homebrew`](https://brew.sh/)
  - Windows: [`chocolatey`](https://chocolatey.org/install) or [`scoop`](https://scoop.sh/)
  - Linux: depends; usually one preinstalled for your system

![](media/terminal.png)

### Remote Access

![](media/terminal-ssh.png)

## Exercises 1

1. Install `git` (and if you are on Windows `unxutils`) through a package manager
2. Look around what other software you might want to install


# Git some Version Control
## What is `git` and why should you use it

`Git` is a version control system (VCS) that helps keep track of changes made to files and directories in a project. It allows you to revert to previous versions, compare changes over time, and collaborate with others on the same project without overwriting each other's work.

- Version control: Keep a history of your project, including every change made.
- Collaboration: Allows multiple people to work on a project at the same time.
- Revertibility: Made a mistake? You can always revert to a previous version.
- Branching and merging: Work on new things without affecting the main project, then combine them when you're ready.

## How to keep track of your work (setting up a repo)

You can use `git` to track your work by setting up a repository, often called a "repo". Here's how:

1. Navigate to your project's directory using the terminal (or open the terminal there).
2. Initialize a new `git` repository by running the command `git init`. This creates a new subdirectory named `.git` that contains all necessary `git` metadata.

## How to commit

Committing is the process by which you save changes to the repository. 

1. To tell `git` to start tracking changes in specific files, you need to add them to the repository with `git add filename`. If you want to add all files in the directory, you can use `git add .`.
2. After adding the files, you can commit your changes using `git commit -m "Your commit message"`. The message should be a brief description of the changes made.^[hint: if you forgot to add a commit message, you will end in vim hell from which you can escape by typing `:q[ENTER]`]
3. You can check the status of your repository (which files have changes, which changes are staged for commit, etc.) using `git status`.

## How to travel back and forth in time

If you make a mistake, or simply want to go back to an earlier version of your project, you can use `git checkout [commit hash]`.

1. Check the history of your git repository with `git log`
2. Copy the hash of the commit you want to revert to
3. Then, you can use `git checkout [commit hash]` to go back to an earlier status of your repository
4. Return to the most recent commit with `git checkout master`

## How to revert

If you want to undo the changes made in one commit, use `git revert`.

1. Check the history of your git repository with `git log`
2. Copy the hash of the commit you want to undo
3. Then, you can use `git revert --no-commit [commit hash]` to go back to an earlier status of your repository
4. `git commit -m "Your commit message"`

## How to branch

Branching in `git` allows you to create a separate version of your project to develop and test new features without affecting the main branch.

1. To create a new branch, use `git branch branch-name`.
2. To switch to your newly created branch, use `git checkout branch-name`.
3. You can make changes here
4. You can go back to the main branch with `git checkout master`

## How to rebase

Rebasing is a way to integrate changes from one branch into another. This can be important if you want to merge the changes from a branch to the main branch, but there were changes there that you want to integrate.

1. First, switch to the branch you want to update with `git checkout branch-name`.
2. Then, use `git rebase other-branch-name` to integrate changes from `other-branch-name`.

## How to merge

Merging is the process of integrating changes from one branch into another.

1. First, you switch to the branch you want to merge changes into with `git checkout branch-name`.
2. Then, you can merge another branch into the current one with `git merge other-branch-name`.

## What is a fork

A fork is a copy of a repository that allows you to freely experiment with changes without affecting the original project. Forking is commonly used in open source projects to propose changes to someone else's project, or to use someone else's project as a starting point for your own work.

![](media/fork.png)

## How to make a pull request

A pull request is a way to propose changes from your fork or branch to the original repository. It's how you contribute to open source projects on platforms like GitHub.

1. First, you fork a branch.
2. You clone your fork repository to a local location using e.g., `git clone https://github.com/JBGruber/ess-web-scraping.git`
3. You make changes to the local repository
4. You add and commit the changes
5. You use `git push` to upload the changes to your fork
6. Then, on GitHub (or the similar platform where the original repository is hosted) there should be a button to open a pull request

![](media/pr.png)


## Exercises 2

1. Fork the course repository on GitHub
2. Clone the course repository to your computer
3. In the folder "participants" copy the file "participants.csv" and name the copy "participatns_YOUR_NAME" 
4. Fill in your details (if you feel uncomfortable sharing your details with the class and on the public GitHub site, just add "-" to some or all columns)
4. Commit and push your changes
5. Make a pull request to the main repo
6. Optional: After I have merged your pull request, you can set your fork to private and add me and Marius as collaborators (you will submit your homework that way)

# `R` Refresher
## Packages

- `R` organises its functions in packages (even base functions)
- Most packages must be installed (once) and attached (every new session)

```{r}
#| eval: false
install.packages("tidyverse")
library(tidyverse)
```

## Accessing Functions

If you do not want to attach an entire package, you can use the Double Colon to only use a specific function:

```{r}
dplyr::select(iris, Sepal.Length)
```

Less often used, you can also do this with `library`:

```{r}
#| eval: false
library("dplyr", include.only = c("select", "mutate"))
mutate(iris, sepal_length = Sepal.Length * 10) |> 
  select(sepal_length)
```

## The Comprehensive R Archive Network (CRAN)

- Central repository for `R` packages
- Rigorous policies and testing
- Currently almost 20k packages (July 2023)

![](https://gist.github.com/daroczig/3cf06d6db4be2bbe3368/raw/c6e74a90d262be7998e67d464314a8cd7a2b05ed/number-of-submitted-packages-to-CRAN.png)

## Other sources?

- Rigorous policies and testing are also a downside
  - Developers hesitate to submit packages
  - Unmaintained (but functional) packages are removed from CRAN
- Alternative repositories are common:
  - GitHub and Gitlab (and SVN)
  - Bioconductor, R-Forge and Omegahat

```{r}
#| eval: false
remotes::install_github("JBGruber/paperboy")
```

## Help!

One of the most important commands in `R` is the `?` though:

```{r}
#| eval: false
?install.packages # And
?remotes::install_github
```

:::: {.columns}

::: {.column width="55%"}
All help files in `R` follow the same structure and principle (although not all help file contain all elements):

- **Title**
- **Description**
- **Usage**:very important: shows you the default values for all arguments (i.e., what is used if you do not set anything) and assumed order

```{r}
#| eval: false
install_github("JBGruber/paperboy") # Same as
install_github(repo = "JBGruber/paperboy",  ref = "HEAD") # Same as
install_github(ref = "HEAD", repo = "JBGruber/paperboy") # Not(!) same as
install_github("HEAD", "JBGruber/paperboy")
```

- **Arguments**: description of arguments in a function. One special argument is the `...` (called ellipsis or dots) which is passed to underlying function.

```{r}
#| eval: false
install_github("JBGruber/paperboy", Ncpus = 6)
```

- **Details**: Usually not that important but this is the first place to look when a function is not doing what you expect
- **Examples**: where I usually start to learn a new function by looking at cases that certainly work (and then rewriting them for my purposes).
:::

::: {.column width="45%"}
![](media/help.png)
:::

::::


## Help!

- Google ("**ggplot2 r** remove legends")
- Some good ressources for answers:
  - stackoverflow.com (if you want to ask a question instead see [how to ask a good question](http://stackoverflow.com/help/how-to-ask) and use a [reproducible example](http://stackoverflow.com/questions/5963269))
  - R help list (stat.ethz.ch) 
  - https://www.r-bloggers.com/ (collection of personal blog posts related to R -- so quality varies)
- ChatGPT

```{r}
#| eval: false
library(askgpt)
log_init()
mean[1:10]
askgpt("What is wrong with my last command?")
```

![](https://user-images.githubusercontent.com/23524101/220632749-da59fe90-d6a2-4ebd-bbfe-d1164e8a7944.mp4)

## Functions

Functions are easy to define in `R`:

```{r}
new_fun <- function(x = 1) {
  out <- c(
    sum(x),
    mean(x),
    median(x)
  )
  return(out)
}
new_fun()
vec <- c(1:10)
new_fun(x = vec)
```

Going through this bit by bit:

- **new_fun**: The name of the new function (convention: use something descriptive; don't use `.` or CamelCase but `_` if you have multiple words)
- **<-**: The assignment operator.
- **function(x)**: Define arguments and defaults here. 
- **{}**: Everything inside the rounded brackets is the body of the function (code you are running when calling the function).
- **return()**: All objects created inside the function are immediately destroyed when the function finished running. Except what is put in `return()` (can be implicit).

## Loops
### For loops

Iterate over a vector:

```{r}
x <- NULL
for (i in 1:10) {
  message(i)
  x <- c(x, i)
}
x
```

- **for**: This is how you start the loop
- **i**: This is the variable which takes a different value in each iteration of the loop
- **in**: separates the variable from the vector
- **1:10**: The vector over which to iterate
- **{}**: The expression inside the round brackets is evaluated once for each value in the vector; `i` takes a different value each run

### Apply loops

Apply function to each element of a vector/list:

```{r}
foo <- function(i, silent = FALSE) {
  if (!silent) {
    message(i) 
  }
  return(i)
}
x <- lapply(1:10, foo)
unlist(x)
```

### purrr::map loops

Also apply function to each element of a vector/list, but coerce types:

```{r}
foo <- function(i, silent = FALSE) {
  if (!silent) {
    message(i) 
  }
  return(i)
}
x <- purrr::map_int(1:10, foo)
x
```

## if

`if` can be used to conditionally run code:

```{r}
if (TRUE) {
  1 + 1
}
```

```{r}
if (FALSE) {
  1 + 1
}
```

Any code that evaluates to a logical (`TRUE`/`FALSE`) can be used:

```{r}
if (1 + 1 == 2) {
  "Hello!"
}
```

You can extend this with `else`, which is executed when the original condition is `FALSE`:

```{r}
if (1 + 2 == 2) {
  "Hello!"
} else {
  "Bye"
}
```

## base `R`

Commonly people referring to *base* `R` mean all functions available when starting `R` but not loading any packages with `library(package)`.

```{r}
df <- mtcars # using a built-in example data.frame
table(df$cyl)
sum(df$cyl)
mean(df$cyl)
dist(head(df)) # calculates euclidian distance between cases
tolower(row.names(df))
```

Especially for simple operations and statistics, *base* is still great.

```{r}
model <- lm(hp ~ mpg, data = df) # simple linear regression
summary(model)
```

## base `R`

*base* also has a plotting system:

```{r}
plot(df$mpg, df$hp, col = "blue", ylab = "horse power", xlab = "miles per gallon", main = "Simple linear regression")
abline(model, col = "red")
text(30, 300, "We can add some text", col = "red")
```

## Tidyverse
### What is it?

- The official description: "The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures".
- The principle that gives the tidyverse its name is that of tidy data: "Each variable forms a column. Each observation forms a row." (see [tidyr vignette](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html) for more info)
- Seems trivial at first but as a principle can be quite consequential (e.g., it means that most object types are ignored and `data.frame`s are very dominant)
- Some coding principles attached to it (e.g., the pipe, functions as verbs that build on each other)

### The pipe

- Formerly `%>%`, now native in `R` as `|>`
- Forwards the result of one function to another
- Makes for much more readable code:

```{r}
transform(aggregate(. ~ cyl, data = subset(mtcars, hp > 100), FUN = function(x) round(mean(x, 2))), kpl = mpg * 0.4251)
```

You Can make this more readable by createing intermediate objects:

```{r}
data1 <- subset(mtcars, hp > 100) # take subset of original data
data2 <- aggregate(. ~ cyl, data = data1, FUN = function(x) round(mean(x, 2))) # aggregate by taking rounded mean
transform(data2, kpl = mpg * 0.4251) # convert miles per gallon to kilometer per liter
```

Or you use the pipe:

```{r}
subset(mtcars, hp > 100) |> 
  aggregate(. ~ cyl, data = _, FUN = function(x) round(mean(x, 2))) |> 
  transform(kpl = mpg * 0.4251)
```

`tidyverse` functions are written with pipes in mind and are named as verbs with the goal to tell you exactly what they do:

```{r}
library(tidyverse)
mtcars |> 
  filter(hp > 100) |> 
  group_by(cyl) |> 
  summarise(across(.cols = everything(), .fns = function(x) x |> mean() |> round(2))) |> 
  mutate(kpl = mpg * 0.4251)
```

Note: You can interject the `View()` command at any line in a complicated pipeline to see the intermediate result in a spreadsheet-style data viewer.

### Special package `ggplot2`

- Completely overhauls the plotting system in `R`
- IMO: the best plotting system in any programming/data science language
- Implements the "Grammar of Graphics": a language for describing custom plots instead of relying on predefined plotting functions
- The specific logic makes it harder to learn than other packages, but you can express essentially any plots in it (I highly recommend using ["ggplot2: Elegant Graphics for Data Analysis"](https://ggplot2-book.org/) to learn the package instead of individual tutorials)

## Exercises 3

1. Run ggplot(data = mpg). What do you see and why?
2. In the function `pb_collect()` from `paperboy`, what do the arguments `ignore_fails` and `connections` do?
3. Write a function that takes a numeric vector of miles per gallon consumption data and transforms it to kilometer per liter. If anything other than a numeric vector is entered, the function should display an error (hint: see ?stop).
4. In the code below, check the sizes of the intermediate objects with `object.size()`.

```{r}
ggplot(data = mpg)

```


```{r}
file_link <- "https://raw.githubusercontent.com/shawn-y-sun/Customer_Analytics_Retail/main/purchase%20data.csv"
df <- read.csv(file_link)
filtered_df <- df[df$Age >= 50,]
aggregated_df <- aggregate(filtered_df$Quantity, by = list(filtered_df$Day), FUN = sum)
names(aggregated_df) <- c("day", "total_quantity")
aggregated_df[order(aggregated_df$total_quantity, decreasing = TRUE)[1:5],]
```

5. How could the code above be improved if you only want the final result, the code should be readable and you care about memory usage?

# Literate Programming
## Background

> “The language in which we express our ideas has a strong influence on our thought processes.”
>
> ― Donald Ervin Knuth, Literate Programming

- When analysing data in R, a cornerstone of a good workflow is documenting what you are doing.
- The whole point of doing data analysis in a programming language rather than a point and click tool is reproducibility.
- Yet if your code does not run after a while and you don't understand what you were doing when writing the code, it's as if you had done your whole analysis in Excel!

## Advantages 

This is where *literate programming* has a lot of advantages:

1. **Enhanced Documentation**: Literate programming combines code and documentation in a single, integrated document. This approach encourages researchers to write clear and comprehensive explanations of their code, making it easier for others (and even themselves) to understand the working of the code, (research) design choices, and logic.
2. **Improved Readability**: By structuring code and documentation in a literate programming style, the resulting code becomes more readable and coherent. The narrative flow helps readers follow the thought process and intentions of the programmer, leading to improved comprehension and maintainability.
3. **Modular and Reusable Code**: Literate programming emphasizes the organization of code into coherent and reusable chunks as they writers come to think of them similar to paragraphs in a text, where each chunk develops one specific idea.
4. **Collaboration and Communication**: Literate programming enhances collaboration among developers by providing a common platform to discuss, share, and review code. The narrative style fosters effective communication, allowing team members to understand the codebase more easily and collaborate more efficiently.
5. **Extensibility and Maintenance**: Well-documented literate programs are typically easier to extend and maintain over time. The clear explanation of choices and functionality helps yourself and others in the future to make decisions about modifications, enhancements, and bug fixes.
6. **Reproducibilty and accountability**: when you save rendered output of an analysis, you know exactly how a table of plot was created. If there are several versions, you can always turn to the rendered document and check which data, code and package versions were used to do your analuysis (at least when documents were written in a specific way.

Quarto (and its predecessor R Markdown) were designed to make it easy for you to make the most of these advantages.
We have already been using these tools throughout the workshop and I hope this made you more familiar with them.

## Exercises 4

1. Use the function `report_template()` from my package [jbgtemplates](https://github.com/JBGruber/jbgtemplates) to start a new report

2. Add some simple analysis in it and render

3. Create a new quarto document and use the following yaml header to start your research abstract:

```
---
title: "Your Research Title"
subtitle: "Abstract Introduction to Web Scraping and Data Management for Social Scientists"
author: Your Name
date: today
format: pdf
---
```

# How to use R and Python together 
## Why combine Python with R? {#why-combine-python-with-r}

![](media/reticulate.jpg){fig-align="center"}

Why not just switch to Python?

1.  If you're here, you probably already know `R` so why re-learn things from scratch?
2.  R is a programming language specifically for statistics with some great built-in functionality that you would miss in Python.
3.  R has absolutely outstanding packages for data science with no drop-in replacement in Python (e.g., ggplot2, dplyr, tidytext).

Why not just stick with `R` then?

1.  Many computational tools are not nativly available in R (e.g., for browser emulation and machine learning) as advancements are made by software engeneers and companies who rely on Python
2.  You might want to collaborate with someone who uses Python and need to run their code
3.  Learning a new (programming) language is always good to extend your skills (also in your the language(s) you already know)

## Setting up Python

### (Try to) Find Python

**Before** you load `reticulate` for the first time, we need to create a virtual environment (and potentially install a version of Python). This is a folder in your project directory with a link to Python and the packages you want to use in this project. Why?

-   Packages (or their dependencies) on the [Python Package Index](https://pypi.org/) can be incompatible with each other -- meaning you can break things by updating.
-   Your operating system might keep older versions of some packages around, which means you could break your OS by and accidental update!
-   This also adds to projects being reproducible on other systems, as you keep track of the specific version of each package used in your project (you could do this in R with the `renv` package).
```{r}
library(reticulate)
version <- "3.11.4"
install_python(version = version)
```

The first step is to check if Python is availabe already and to find where it is located on your system:

```{r}
if (R.Version()$os == "mingw32") {
  system("where python") # for Windows
} else {
  system("whereis python")
}
```


### (If Nothing is Found) Install Python

The easiest way to install Python for `R` projects is through `reticulate` (it also causes issues regulary though, so consider using your package manager):

```{r}
#| eval: false
reticulate::install_miniconda()
```

Note, however, that your user name can not contain space or special characters.
If that is the case, you should install miniconda on a different location than the default.
For example `reticulate::install_miniconda(path = "C:/tools/miniconda")` (you need to create the folder `C:/tools` manually).
Also note that `system("whereis python")` will not pick up this installation. Instead you can find the path using:

```{r}
reticulate::miniconda_path()
```


### Create a Virtual Environment

To do this, you first have to indicate the location where your `Python` executable lives (this path should always end in `/bin/python` or `python.exe` on Windows):

```{r}
# python_location <- "/home/johannes/.local/share/r-miniconda/bin/python"
python_location <- "/Users/reddy/.pyenv/versions/3.11.4/bin/python3.11"
# for Windows the path is usually "C:/Users/{user}/AppData/Local/r-miniconda/python.exe"
```

Then we can create a new virtual environment in the project folder:

```{r}
# I build in this if condition to not accidentally overwrite the environment when rerunning the notebook
if (!reticulate::virtualenv_exists(envname = "../python-env/")) {
  reticulate::virtualenv_create("../python-env/", python = python_location)
}
reticulate::virtualenv_exists(envname = "../python-env/")
```

### Make sure the Right Environment is Loaded

```{r}
if (R.Version()$os == "mingw32") {
  python_path <- "../python-env/Scripts/python.exe"
} else {
  python_path <- "../python-env/bin/python"
}
python_path
file.exists(python_path)
Sys.setenv(RETICULATE_PYTHON = python_path)
```

We can write this to your `.Renviron` file (otherwise the `Sys.setenv()` line above needs to be in every script).
Note: the variables in the `.Renviron` file are set when `R` is started.

```{r}
#| eval: false
usethis::edit_r_environ(scope = "project")
```

The file should look something like this:

```
RETICULATE_PYTHON=/home/johannes/Dropbox/Teaching/ess-introduction-to-web-scraping/python-env/bin/python
```

### Load `reticulate` and See if it is Working

```{r}
library(reticulate)
py_config()
```

## Installing Python Packages

`reticulate::py_install()` installs package similar to `install.packages()`. Let's install the packages we need:

```{r}
#| eval: false
reticulate::py_install(c(
  "playwright",
  "xvfbwrapper"
))
```

But there are some caveats:

-   not all packages can be installed with the name you see in scripts (e.g.,to install the package, call "scikit-learn", to load it you need `sklearn`)
-   you might need a specific version of a package to follow a specific tutorial
-   there can be different flavours of the same package (e.g., `bertopic`, `bertopic[gensim]`, `bertopic[spacy]`)
-   you will get a cryptic warning if you attempt to install base Python packages

```{r}
#| error: true
reticulate::py_install("os")
```

## Installing Python Packages

:::: {.columns}

::: {.column width="60%"}
If you see the `$` in the beginning, these are command line/bash commands. Use the ```` ```{bash} ```` chunk option to run these commands and use the pip and python versions in your virtual environment (you could also [activate the environment](https://docs.python.org/3/tutorial/venv.html) instead).

````
```{{bash}}
#| eval: false
./python-env/bin/pip install -U pip setuptools wheel
./python-env/bin/pip install -U 'spacy'
./python-env/bin/python -m spacy download en_core_web_sm
./python-env/bin/python -m spacy download de_core_news_sm
```
````

On Windows, the binary files are in a different location:

````
```{{bash}}
#| eval: false
./python-env/Scripts/pip.exe install -U pip setuptools wheel
./python-env/Scripts/pip.exe install -U 'spacy'
./python-env/Scripts/python.exe -m spacy download en_core_web_sm
./python-env/Scripts/python.exe -m spacy download de_core_news_sm
```
````
:::

::: {.column width="40%" }
General tip: see if the software distributor has instructions, like the excellent ones from [`spacy`](https://spacy.io/usage):

![](media/spacy-install.png)
:::

::::


## Workflow
### Use in Quarto

In my opinion, a nice workflow is to use R and Python together in a Quarto Document. All you need to do to tell Quarto to run a Python, instead of an R chunk is to replace ```` ```{r} ```` with ```` ```{python} ````.

````
```{{r}}
text <- "Hello World! From R"
print(text)
```
````

```{r}
#| echo: false
text <- "Hello World! From R"
print(text)
```

````
```{{python}}
text = "Hello World! From Python"
print(text)
```
````

```{python}
#| echo: false
text = "Hello World! From Python"
print(text)
```

### Shortcut

You can even set up a shortcut to make these chunks (I like `Ctrl+Alt+P`):

![](media/RStudio-Shortcut-1.png)

![](media/RStudio-Shortcut-2.png)


To get an interactive Python session in your Console, you can use `reticulate::repl_python()`.
```{r}
library(reticulate)
reticulate::repl_python()
```


As you've seen above, the code is pretty similar, with a few key differences:

### Syntax

-   `=` instead of `<-`
-   code formatting is part of the syntax!
-   base Python does not have `data.frame` class, instead you have dictionaries or the DataFrame from the Pandas package
-   Python lists are the equivalent of R vectors
-   the `*apply` family of functions and vectorised code does not exist as such -- everything is a for loop! <!-- - the equivalent of `$`, `%>% ` and `::` in R is `.` in Python (but not always) -->
-   a lot of packages are writing object oriented instead of functional code
-   many more!

```{python}
#| error: true
my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
my_list + 2 # does not work in Python
for i in my_list:
    print(i + 2)
```

```{python}
my_dict = {'name': ['John', 'Jane', 'Jim', 'Joan'],
          'age': [32, 28, 40, 35],
          'city': ['New York', 'London', 'Paris', 'Berlin']}
my_dict
```

### `reticulate` Magic

The truly magical thing about `reticulate` is how seamless it hands objects back and forth between Python and R:

```{r}
py$text
py$my_list
py$my_dict
```

```{r}
my_df <- data.frame(num = 1:10,
                    let = LETTERS[1:10])
my_list <- list(df = my_df, 11:20)
```

```{python}
r.text
r.my_df
r.my_list
```

### Functions

What I think is especially cool is that this even works with functions:

```{python}
def hello(x=None):
  """
  :param x: name of the person to say hello to.
  """
  if not x:
    print("Hello World!")
  else:
    print("Hello " + x + "!")
```

```{r}
py$hello()
py$hello("Class")
reticulate::py_help(py$hello)
```


## Exercises 5

1. Write a Python function that takes a numeric vector of miles per gallon consumption data and transforms it to kilometer per liter. Use the function from within R

```{python}
mpg=[35.6,34.6,33.6,32.7]
rate=0.35
for i in mpg:
  print(i*0.35)
```
```{r}
kpl <- as.numeric(
  py$mpg)*0.35
kpl
```


2. Use the function in Python, but using a vector defined in R
```{r}
MPG <- c(35.6,34.6,33.6,32.7)
```

```{python}
r.MPG

for i in r.MPG:
  print(i*0.35)
```

# Homework

You did not come to class to just scrape exercise pages.
You probably had some initial data and/or research question in mind.

Please write a short abstract (~200-400 words) on what you want to accomplish with the web scraping skill you will learn here, so we can try and incorporate the necessary tools in one of the sessions this week.
The abstract should include what data can be found on the website and what potential research quesions you have in mind.

Deadline: Tuesday midnight



# Wrap Up

Save some information about the session for reproducibility.

```{r}
#| code-fold: true
#| code-summary: "Show Session Info"
sessionInfo()
```

```{r}
library(quarto)
quarto::quarto_version()
```

